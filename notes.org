#+TITLE: ts.el notes

* Plans
:PROPERTIES:
:ID:       2e19b304-f54b-455f-b9fe-ad5be5b31086
:END:

+  Timestamp library, making it easy to work with timestamps and dates in Emacs.
+  Using ~defstructs~
     -  Define accessors with macros
          +  Accessors store precomputed data for later access (e.g. if day-of-week is not yet computed, store it in the struct and return it)
+  Store timestamps as either Emacs internal time values or as Unix timestamps
     -  Need to benchmark which is faster to work with, format, decode, increment, etc.  Unix timestamps would be simpler to deal with, but maybe slower...?
+  Accessors should be named unambiguously
     -  e.g. ~dow~ for day-of-week, ~dom~ for day-of-month, rather than ~day~, which could be either
          +  And maybe ~dow-num~ or ~dow-name~ to be even clearer

* Tasks

** TODO Ensure timezones are handled properly

Unix timestamps, by definition, are in UTC.  We need to ensure that timezones are handled properly when creating timestamps, so that e.g. a timestamp in a non-UTC timezone is converted to UTC when calling ~ts-parse~.

* Tools

** Reset all struct accessors

#+BEGIN_SRC elisp
  (cl-loop for (name . opts) in (cl-struct-slot-info 'ts)
         for accessor = (intern (concat "ts-" (symbol-name name)))
         for aliases = (--map (intern (concat "ts-" (symbol-name it)))
                              (plist-get (cdr opts) :aliases))
         do (unintern accessor)
         do (--each aliases
              (unintern it)))
#+END_SRC

* Benchmarking

** Emacs internal time values vs. Unix timestamps

#+BEGIN_SRC elisp :results silent
  (cl-defstruct ts
    hour minute second
    dom dow doe
    moy
    year
    tz
    internal unix)
#+END_SRC

*** Formatting

#+BEGIN_SRC elisp
  (let ((format "%Y-%m-%d %H:%M:%S"))
    (bench-multi :times 100000
      :forms (("Unix timestamp" (format-time-string format 1544311232))
              ("Internal time" (format-time-string format '(23564 20962 864324 108000))))))
#+END_SRC

#+RESULTS:
| Form           | x faster than next |     Total runtime | # of GCs |   Total GC runtime |
|----------------+--------------------+-------------------+----------+--------------------|
| Internal time  | 1.00               |       4.846531505 |        5 | 1.1269977660000006 |
| Unix timestamp | slowest            | 4.851822707999999 |        5 | 1.1267304740000004 |

No difference when formatting.

*** Getting current time

#+BEGIN_SRC elisp
  (bench-multi :times 100000
    :forms (("Unix timestamp" (float-time))
            ("Internal time" (current-time))))
#+END_SRC

#+RESULTS:
| Form           | x faster than next |        Total runtime | # of GCs | Total GC runtime |
|----------------+--------------------+----------------------+----------+------------------|
| Unix timestamp | 1.12               | 0.008584705999999998 |        0 |              0.0 |
| Internal time  | slowest            |          0.009583258 |        0 |              0.0 |

Getting the current time as a Unix timestamp is slightly faster.  The docs for ~float-time~ warn that it's floating point and that ~current-time~ should be used if precision is needed.  I don't think that's important for us.

** ~org-fix-decoded-time~ vs. ~ts-~ setters

*** With filling

#+BEGIN_SRC elisp
  (let* ((s "mon 9 dec 2018")
         (parsed (parse-time-string s)))
    (bench-multi :times 1000
      :ensure-equal t
      :forms (("org-fix-decoded-time" (ts-fill (make-ts :unix (float-time (apply #'encode-time (org-fix-decoded-time parsed))))))
              ("cl-loop nth" (ts-fill (make-ts :unix (float-time (apply #'encode-time (cl-loop for i from 0 to 5
                                                                                               when (null (nth i parsed))
                                                                                               do (setf (nth i parsed) 0)
                                                                                               finally return parsed))))))
              ("cl-loop elt" (ts-fill (make-ts :unix (float-time (apply #'encode-time (cl-loop for i from 0 to 5
                                                                                               when (null (elt parsed i))
                                                                                               do (setf (elt parsed i) 0)
                                                                                               finally return parsed))))))
              ("ts- accessors" (-let* (((S M H d m Y) parsed))
                                 (ts-fill (ts-update (make-ts :second (or S 0) :minute (or M 0) :hour (or H 0)
                                                              :dom (or d 0) :moy (or m 0) :year (or Y 0))))))
              )))
#+END_SRC

#+RESULTS:
| Form                 | x faster than next |      Total runtime | # of GCs |    Total GC runtime |
|----------------------+--------------------+--------------------+----------+---------------------|
| ts- accessors        |               2.11 | 0.6814406310000001 |        0 |                 0.0 |
| org-fix-decoded-time |               1.00 |         1.43786147 |        1 | 0.40317458900000247 |
| cl-loop nth          |               1.01 | 1.4420543490000002 |        1 | 0.40715375199999926 |
| cl-loop elt          |            slowest | 1.4522118320000001 |        1 | 0.41347589399998697 |

*** Just returning unix time

#+BEGIN_SRC elisp
  (let* ((s "mon 9 dec 2018"))
    (bench-multi :times 1000
      :ensure-equal t
      :forms (("org-fix-decoded-time" (ts-unix (make-ts :unix (float-time (apply #'encode-time (org-fix-decoded-time (parse-time-string s)))))))
              ("cl-loop nth" (ts-unix (make-ts :unix (float-time (apply #'encode-time (cl-loop with parsed = (parse-time-string s)
                                                                                               for i from 0 to 5
                                                                                               when (null (nth i parsed))
                                                                                               do (setf (nth i parsed) 0)
                                                                                               finally return parsed))))))
              ("cl-loop elt" (ts-unix (make-ts :unix (float-time (apply #'encode-time (cl-loop with parsed = (parse-time-string s)
                                                                                               for i from 0 to 5
                                                                                               when (null (elt parsed i))
                                                                                               do (setf (elt parsed i) 0)
                                                                                               finally return parsed))))))
              ("ts- accessors" (-let* ((parsed (parse-time-string s))
                                       ((S M H d m Y) parsed))
                                 (ts-unix (ts-update (make-ts :second (or S 0) :minute (or M 0) :hour (or H 0)
                                                              :dom (or d 0) :moy (or m 0) :year (or Y 0))))))
              ("ts-parse" (ts-unix (ts-parse s)))
              ("ts-parse-defsubst" (ts-unix (ts-parse-defsubst s)))
              ("ts-parse-macro" (ts-unix (ts-parse-macro s))))))
#+END_SRC

#+RESULTS:
| Form                 | x faster than next | Total runtime | # of GCs | Total GC runtime |
|----------------------+--------------------+---------------+----------+------------------|
| ts-parse-macro       |               1.00 |   0.028634316 |        0 |              0.0 |
| ts-parse-defsubst    |               1.01 |    0.02869171 |        0 |              0.0 |
| cl-loop nth          |               1.00 |   0.029103046 |        0 |              0.0 |
| cl-loop elt          |               1.04 |   0.029246385 |        0 |              0.0 |
| org-fix-decoded-time |               1.00 |   0.030463535 |        0 |              0.0 |
| ts- accessors        |               1.09 |   0.030527408 |        0 |              0.0 |
| ts-parse             |            slowest |   0.033408084 |        0 |              0.0 |

Funcall overhead is noticeable.  We could provide the macro or defsubst in addition to the function, so users in tight loops could avoid funcall overhead.

*** As ~ts-parse~

#+BEGIN_SRC elisp
  (let* ((s "mon 9 dec 2018"))
    (bench-multi :times 1000
      :forms (("ts-parse" (ts-parse s))
              ("ts-parse ts-unix" (ts-unix (ts-parse s))))))
#+END_SRC

#+RESULTS:
| Form             | x faster than next | Total runtime | # of GCs | Total GC runtime |
|------------------+--------------------+---------------+----------+------------------|
| ts-parse         | 1.02               |   0.031561369 |        0 |              0.0 |
| ts-parse ts-unix | slowest            |   0.032193442 |        0 |              0.0 |

** Accessor dispatch vs. ~(string-to-number (format-time-string...~

#+BEGIN_SRC elisp
  (let* ((ts (ts-now))
         (unix (ts-unix ts)))
    (ts-fill ts)
    (bench-multi :times 1000
      :ensure-equal t
      :forms (("Accessor dispatch" (ts-year ts))
              ("(string-to-number (format-time-string..." (string-to-number (format-time-string "%Y" unix))))))
#+END_SRC

#+RESULTS:
| Form                                     | x faster than next | Total runtime | # of GCs | Total GC runtime |
|------------------------------------------+--------------------+---------------+----------+------------------|
| Accessor dispatch                        | 93.17              |   0.000514627 |        0 |              0.0 |
| (string-to-number (format-time-string... | slowest            |   0.047949907 |        0 |              0.0 |
