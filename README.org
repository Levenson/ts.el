#+TITLE: ts.el
#+PROPERTY: LOGGING nil

~ts~ is a date and time library for Emacs.  It's currently in prototype stage.  It aims to be more convenient than patterns like ~(string-to-number (format-time-string "%Y"))~ by providing easy accessors, like ~(ts-year (ts-now))~.

One of the principles it aims to follow is using unambiguous (or at least, less ambiguous and somewhat intuitive) function names.  For example, ~day~ could mean day-of-the-month as a number, day-of-the-week as a number, day-of-the-week as an abbreviated name, day-of-the-week as a full name, etc.  Instead, we use names like ~dom~ for day-of-the-month as a number (also available as ~d~ for convenience, which corresponds to ~%d~ in ~format-time-string~), ~dow~ for day-of-the-week as a number, ~day~ for day-of-the-week as an abbreviated name, ~day-full~ for day-of-the-week as a full name, etc.

Another feature is that formatted date parts are computed lazily rather than when a timestamp object is instantiated, and the computed parts are then cached for later access without recomputing.  Behind the scenes, this avoids unnecessary ~(string-to-number (format-time-string...~ calls.

Here are some examples of what you can do:

Get parts of the current date:

#+BEGIN_SRC elisp
  (ts-dow (ts-now))        ;=> 6
  (ts-day-abbr (ts-now))   ;=> "Sat"
  (ts-day-name (ts-now))   ;=> "Saturday"
  (ts-month (ts-now))      ;=> 12
  (ts-month-abbr (ts-now)) ;=> "Dec"
  (ts-month-name (ts-now)) ;=> "December"
  (ts-day (ts-now))        ;=> 8
  (ts-year (ts-now))       ;=> 2018
  (ts-hour (ts-now))       ;=> 23
  (ts-minute (ts-now))     ;=> 9
  (ts-second (ts-now))     ;=> 14
  (ts-tz-offset (ts-now))  ;=> "-0600"
  (ts-tz-abbr (ts-now))    ;=> "CST"
#+END_SRC

Increment the current date:

#+BEGIN_SRC elisp
  ;; By 10 years:
  (let ((ts (ts-now)))
    (ts-adjustf ts 'year 10)
    (list (ts-format nil (ts-now))
          (ts-format nil ts)))
  ;; ("2018-12-15 22:00:34 -0600"
  ;;  "2028-12-15 22:00:34 -0600")

  ;; By 10 years, 2 months, 3 days, 5 hours, and 4 seconds:
  (let ((ts (ts-now)))
    (ts-adjustf ts 'year 10 'month 2 'day 3 'hour 5 'second 4)
    (list (ts-format nil (ts-now))
          (ts-format nil ts)))
  ;; ("2018-12-15 22:02:31 -0600"
  ;;  "2029-02-19 03:02:35 -0600")
#+END_SRC

What day of the week was 2 days ago?

#+BEGIN_SRC elisp
  (ts-day-name (ts-dec 'day 2 (ts-now)))             ;=> "Thursday"

  ;; Or, with threading macros:
  (thread-last (ts-now) (ts-dec 'day 2) ts-day-name) ;=> "Thursday"
  (->> (ts-now) (ts-dec 'day 2) ts-day-name)         ;=> "Thursday"
#+END_SRC

Get timestamp for this time last week:

#+BEGIN_SRC elisp
  (ts-unix (ts-adjust 'day -7 (ts-now)))
  ;;=> 1543728398.0

  ;; To confirm that the difference really is 7 days:
  (/ (- (ts-unix (ts-now))
        (ts-unix (ts-adjust 'day -7 (ts-now))))
     86400)
  ;;=> 7.000000567521762

  ;; Or human-friendly as a list:
  (ts-human-duration
   (ts-difference (ts-now)
                  (ts-dec 'day 7 (ts-now))))
  ;;=> (:years 0 :days 7 :hours 0 :minutes 0 :seconds 0)

  ;; Or as a string:
  (ts-human-format-duration
   (ts-difference (ts-now)
                  (ts-dec 'day 7 (ts-now))))
  ;;=> "7 days"

  ;; Or confirm by formatting:
  (list :now (ts-format nil)
        :last-week (ts-format nil (ts-dec 'day 7 (ts-now))))
  ;;=> (:now "2018-12-08 23:31:37 -0600" 
  ;;   :last-week "2018-12-01 23:31:37 -0600")
#+END_SRC

Some accessors have aliases similar to ~format-time-string~ constructors:

#+BEGIN_SRC elisp
  (ts-hour (ts-now))   ;=> 0
  (ts-H (ts-now))      ;=> 0

  (ts-minute (ts-now)) ;=> 56
  (ts-min (ts-now))    ;=> 56
  (ts-M (ts-now))      ;=> 56

  (ts-second (ts-now)) ;=> 38
  (ts-sec (ts-now))    ;=> 38
  (ts-S (ts-now))      ;=> 38

  (ts-year (ts-now))   ;=> 2018
  (ts-Y (ts-now))      ;=> 2018

  (ts-month (ts-now))  ;=> 12
  (ts-m (ts-now))      ;=> 12

  (ts-day (ts-now))    ;=> 9
  (ts-d (ts-now))      ;=> 9
#+END_SRC

Parse a string into a timestamp object:

#+BEGIN_SRC elisp
  (ts-format nil (ts-parse "sat dec 8 2018 12:12:12"))  ;=> "2018-12-08 12:12:12 -0600"
#+END_SRC

Format the difference between two timestamps:

#+BEGIN_SRC elisp
  (ts-human-format-duration
   (ts-difference (ts-now)
                  (ts-adjust 'day -400 'hour -2 'minute -1 'second -5 (ts-now))))
  ;; => "1 years, 35 days, 2 hours, 1 minutes, 5 seconds"

  ;; Abbreviated:
  (ts-human-format-duration
   (ts-difference (ts-now)
                  (ts-adjust 'day -400 'hour -2 'minute -1 'second -5 (ts-now)))
   'abbr)
  ;; => "1y35d2h1m5s"
#+END_SRC

* License

GPLv3

# Local Variables:
# eval: (require 'org-make-toc)
# before-save-hook: org-make-toc
# org-export-with-properties: ()
# org-export-with-title: t
# End:
